// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package salsa

import (
	"fmt"
	"testing"
)

func TestCore208(t *testing.T) {
	in := [64]byte{
		0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86,
		0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
		0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5,
		0x0d, 0xf8, 0x46, 0x11, 0x6d, 0xcd, 0x3b, 0x1d,
		0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85,
		0x14, 0x12, 0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32,
		0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29,
		0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e}

	out := [64]byte{
		0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99,
		0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c, 0xef, 0x05,
		0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d,
		0xfd, 0x7b, 0x1c, 0x63, 0x96, 0x68, 0x2f, 0x29,
		0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc,
		0xfe, 0x6b, 0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba,
		0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c,
		0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81,
	}

	Core208(&in, &in)
	if in != out {
		t.Errorf("expected %x, got %x", out, in)
	}
}

func TestXORKeyStream(t *testing.T) {
	/*
		in := []byte{
			0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86,
			0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
			0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5,
			0x0d, 0xf8, 0x46, 0x11, 0x6d, 0xcd, 0x3b, 0x1d,
			0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85,
			0x14, 0x12, 0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32,
			0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29,
			0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e}
	*/

	in512 := make([]byte, 512)
	//in1024 := make([]byte, 1024)

	out512_test20 := []byte{
		0x89, 0x80, 0x60, 0x83, 0xdc, 0x07, 0x91, 0x81,
		0x59, 0x9b, 0x78, 0xa3, 0xbc, 0x19, 0x68, 0x9b,
		0xee, 0x0e, 0x47, 0x47, 0x1a, 0x55, 0x0b, 0xce,
		0xfa, 0xcd, 0x91, 0x66, 0xf6, 0xd1, 0xed, 0x66,
		0xcb, 0x58, 0xb0, 0x7f, 0x6a, 0xad, 0x64, 0x30,
		0xb1, 0x34, 0x25, 0xba, 0x3c, 0x3b, 0xbd, 0x61,
		0x7d, 0xcd, 0x66, 0x77, 0xeb, 0x98, 0xd5, 0xeb,
		0x7b, 0xfc, 0x80, 0x4b, 0x47, 0x5e, 0x5a, 0x64,
		0xb8, 0x4f, 0xe2, 0xa7, 0x88, 0x48, 0x19, 0x34,
		0x6f, 0x3b, 0xa7, 0x06, 0x8b, 0x1e, 0xa9, 0x6f,
		0xd8, 0xf3, 0x14, 0xe7, 0x94, 0xa3, 0x6c, 0x69,
		0x14, 0x2d, 0x93, 0xa5, 0x36, 0xab, 0x64, 0xed,
		0x6c, 0x1f, 0x02, 0x36, 0x8f, 0x59, 0xc9, 0xaf,
		0xe1, 0x4f, 0x3b, 0xd2, 0xe0, 0xf6, 0x6e, 0x2f,
		0xe0, 0x5c, 0xeb, 0xe2, 0xb6, 0x5b, 0x8a, 0xa6,
		0xc5, 0x80, 0x06, 0xb6, 0x2c, 0x0c, 0xbd, 0x1f,
		0xcc, 0x3d, 0x2f, 0xaa, 0x75, 0x42, 0x40, 0xe1,
		0x92, 0x4a, 0x9b, 0x4e, 0x98, 0xca, 0x4e, 0xde,
		0x59, 0x5b, 0x38, 0xdf, 0xbf, 0x38, 0x39, 0x49,
		0x69, 0xd2, 0xeb, 0xa5, 0xbf, 0x54, 0xa3, 0x0a,
		0xc6, 0x9f, 0x3e, 0x82, 0x30, 0x1c, 0x63, 0xa6,
		0x0f, 0xf3, 0x83, 0xb9, 0xce, 0x10, 0x1e, 0x5e,
		0xa0, 0x2a, 0x72, 0xe8, 0xf7, 0x0d, 0x4c, 0x4a,
		0x67, 0x3b, 0x2a, 0x90, 0x39, 0x07, 0x0f, 0xd9,
		0x7e, 0x89, 0x24, 0xee, 0x81, 0xce, 0x7c, 0xaa,
		0x53, 0xeb, 0x2b, 0x13, 0x7e, 0x96, 0x82, 0x55,
		0x03, 0x93, 0xae, 0x31, 0xc7, 0x88, 0xed, 0x58,
		0x71, 0x59, 0x53, 0xce, 0x4b, 0x7d, 0xdb, 0xa0,
		0x53, 0xaf, 0xab, 0xef, 0x8d, 0x17, 0x79, 0xde,
		0x2a, 0x5b, 0xac, 0x0e, 0x7b, 0x13, 0x33, 0x3b,
		0xfd, 0x3e, 0xf3, 0x8d, 0xdd, 0xc0, 0x79, 0x17,
		0x5c, 0x37, 0xdd, 0x42, 0xa7, 0x64, 0x17, 0xac,
		0x43, 0x00, 0x9f, 0x55, 0x74, 0x9f, 0xa6, 0xda,
		0x1d, 0xf0, 0x55, 0x2d, 0x0d, 0xf5, 0x5b, 0xa7,
		0xbb, 0x3c, 0x57, 0x63, 0x5f, 0xc5, 0xad, 0x43,
		0x8c, 0xa0, 0x70, 0x70, 0x08, 0x86, 0x31, 0x97,
		0x45, 0x5d, 0x90, 0x68, 0x0d, 0xad, 0x6e, 0xd0,
		0xab, 0x4d, 0x35, 0xc9, 0xba, 0x99, 0xe7, 0xc9,
		0x4a, 0xc6, 0x11, 0xde, 0x8e, 0xcd, 0x95, 0x9a,
		0x38, 0x3f, 0x41, 0x07, 0x53, 0x4d, 0x53, 0x44,
		0xf0, 0x19, 0x2d, 0x8d, 0x68, 0x13, 0x0c, 0x20,
		0xb4, 0xfe, 0xa1, 0x2b, 0x7e, 0xca, 0x52, 0xfb,
		0x7d, 0x34, 0x98, 0xcf, 0x4e, 0x99, 0x26, 0x88,
		0x03, 0x5d, 0xf7, 0xdb, 0x84, 0x35, 0x41, 0x18,
		0x48, 0x99, 0xb1, 0x63, 0x92, 0xf8, 0xeb, 0xaa,
		0x3a, 0x89, 0xe9, 0x9e, 0x8b, 0x5b, 0xce, 0x9b,
		0x13, 0x6d, 0xf2, 0x8a, 0x00, 0x9a, 0x89, 0xaf,
		0xfe, 0x00, 0xc0, 0x90, 0x01, 0xac, 0x41, 0x7b,
		0x8b, 0x70, 0xe5, 0x14, 0x20, 0xfe, 0x2c, 0xa8,
		0xaa, 0x15, 0xdb, 0xa5, 0x79, 0xb1, 0x59, 0x5a,
		0xdd, 0xa5, 0x59, 0xa6, 0x59, 0xd1, 0x9c, 0x02,
		0xe5, 0x86, 0x90, 0xaf, 0x31, 0x93, 0x28, 0xda,
		0xdd, 0xd7, 0xa6, 0xd4, 0x56, 0xce, 0x78, 0xd2,
		0x04, 0xa4, 0x58, 0x99, 0xb8, 0x9a, 0x84, 0xfd,
		0xfc, 0x26, 0x6d, 0x31, 0x57, 0x40, 0xba, 0xaa,
		0xa0, 0x71, 0x51, 0xaa, 0x9e, 0x88, 0x4e, 0x67,
		0x83, 0xb3, 0xb4, 0x41, 0xfb, 0xa5, 0xb1, 0x2d,
		0x9a, 0xf4, 0xf6, 0x75, 0x13, 0x89, 0x79, 0x5b,
		0xa7, 0x39, 0x3e, 0x35, 0x89, 0x5a, 0x79, 0xc0,
		0xb7, 0x9d, 0x3f, 0xdd, 0xe0, 0x42, 0xb4, 0x2e,
		0x16, 0xa5, 0x38, 0x69, 0x8a, 0x86, 0xc8, 0x54,
		0x31, 0x21, 0x56, 0x56, 0x24, 0x87, 0x73, 0x36,
		0xcb, 0xd5, 0x3c, 0x55, 0x93, 0xdb, 0xa0, 0x36,
		0x27, 0x7e, 0x91, 0x4d, 0xaa, 0x32, 0x0d, 0x99,
	}

	out512_test12 := []byte{
		0xdd, 0x5b, 0xbe, 0x53, 0x77, 0x3e, 0x4f, 0x33,
		0x78, 0x2c, 0xc5, 0xdb, 0xa2, 0x36, 0x59, 0xc1,
		0x00, 0x9b, 0xf2, 0x15, 0x0b, 0x53, 0xa1, 0xd1,
		0x33, 0xa6, 0x84, 0x16, 0x90, 0x84, 0x65, 0x2f,
		0x2e, 0xac, 0x83, 0x8b, 0x16, 0xc2, 0x5c, 0xcc,
		0xe3, 0xc6, 0x8e, 0x0a, 0x97, 0xeb, 0x15, 0x2a,
		0xc3, 0xe7, 0x80, 0x2b, 0xa2, 0x9d, 0x5d, 0x0c,
		0xd3, 0xbb, 0x51, 0x2d, 0x1c, 0xc4, 0x21, 0x37,
		0x06, 0x33, 0x55, 0x66, 0xf9, 0x6f, 0x37, 0xf1,
		0xb8, 0x5d, 0x08, 0xfb, 0x15, 0x9f, 0xa8, 0x2f,
		0xa7, 0x5e, 0x6f, 0xa1, 0xb7, 0x5c, 0x58, 0x7e,
		0x08, 0x63, 0x6c, 0x7d, 0xa4, 0xac, 0x87, 0xe8,
		0xaa, 0xfd, 0x39, 0x43, 0x8e, 0x67, 0x7d, 0x08,
		0xf8, 0x6d, 0x12, 0x64, 0x02, 0xce, 0x5c, 0xc1,
		0x1c, 0x08, 0x22, 0xb9, 0x1c, 0x97, 0xa7, 0xef,
		0x71, 0x66, 0x2f, 0x25, 0x7f, 0x9b, 0xfd, 0x36,
		0xfb, 0xaf, 0x4d, 0xf0, 0x69, 0xc1, 0x60, 0x9f,
		0x36, 0xc8, 0xa6, 0x2d, 0xb4, 0x09, 0x06, 0x80,
		0x21, 0x54, 0xeb, 0xd0, 0x3a, 0x3e, 0x3b, 0x96,
		0x28, 0x4e, 0xfd, 0x72, 0x34, 0xd9, 0x6b, 0xb6,
		0x53, 0xe9, 0x15, 0x96, 0x4f, 0xc2, 0x72, 0xff,
		0x17, 0x75, 0x94, 0x34, 0x8d, 0x88, 0x7c, 0x25,
		0x8f, 0x4d, 0x64, 0x27, 0x6a, 0x96, 0x0a, 0xd1,
		0xe6, 0x2f, 0x72, 0x52, 0xc7, 0x43, 0xb7, 0x7b,
		0x69, 0xc9, 0x9d, 0x26, 0x0f, 0x8f, 0xf0, 0x07,
		0xaf, 0x7b, 0xb0, 0x52, 0x5d, 0xdd, 0x30, 0x4a,
		0x4c, 0x65, 0xd1, 0xf5, 0x25, 0xbb, 0xb9, 0x29,
		0xbf, 0x68, 0x0f, 0x2c, 0x3c, 0x9e, 0x53, 0xfd,
		0x6c, 0xde, 0x5f, 0x15, 0xfb, 0x54, 0x6a, 0x61,
		0x9a, 0xda, 0xa7, 0x44, 0xbb, 0x9a, 0xa7, 0x2d,
		0x2a, 0xa2, 0x6c, 0x37, 0x7a, 0x58, 0xc1, 0x2f,
		0xe7, 0x1c, 0xd6, 0xbc, 0x20, 0x39, 0x0e, 0xf4,
		0x37, 0x19, 0xbd, 0x84, 0x63, 0x1e, 0x79, 0x80,
		0x0b, 0x8f, 0xe9, 0xc9, 0x13, 0x0f, 0x26, 0x1f,
		0xb5, 0x17, 0x47, 0x0b, 0xc4, 0x04, 0x48, 0x6a,
		0x97, 0x56, 0x61, 0xc8, 0xb5, 0x8a, 0xb1, 0x9f,
		0x90, 0x58, 0x9f, 0x87, 0x81, 0x6a, 0x52, 0xc1,
		0x95, 0xe8, 0x93, 0xf5, 0xaa, 0x2d, 0x5b, 0xb8,
		0xb8, 0xe8, 0x7b, 0x5a, 0x34, 0x81, 0x19, 0xa8,
		0xc2, 0xa9, 0xa4, 0xd4, 0x50, 0xa2, 0xa8, 0x33,
		0xbc, 0x30, 0x33, 0xa7, 0x93, 0x0e, 0x21, 0x0a,
		0x48, 0xd6, 0x0a, 0xce, 0xa6, 0x9f, 0x65, 0x7a,
		0x29, 0x1f, 0xa3, 0x8d, 0x86, 0x76, 0x6e, 0x61,
		0xed, 0x0d, 0x05, 0x97, 0xc7, 0x4e, 0x4b, 0xb1,
		0xb5, 0x59, 0x6b, 0x76, 0xab, 0x8f, 0x1c, 0xa4,
		0x0f, 0x0b, 0xe9, 0x28, 0xd8, 0x4a, 0xd2, 0xcb,
		0x69, 0x4e, 0x5e, 0x8b, 0xfb, 0x27, 0xb7, 0x27,
		0x26, 0x4f, 0xa2, 0x82, 0x10, 0xdc, 0xfa, 0x97,
		0x46, 0x9c, 0x41, 0x2c, 0x5b, 0x9a, 0xe4, 0x1e,
		0x0e, 0xb8, 0x07, 0x83, 0x64, 0x87, 0xc2, 0x75,
		0x7d, 0x46, 0x92, 0x8d, 0x16, 0x7b, 0xde, 0xb0,
		0x49, 0xde, 0x61, 0x50, 0x93, 0xfe, 0x1f, 0x86,
		0x75, 0x44, 0x72, 0x03, 0x77, 0x37, 0x5f, 0x42,
		0x6f, 0xfe, 0xbf, 0x93, 0xc8, 0x74, 0x1f, 0x43,
		0x82, 0x6b, 0x30, 0x0c, 0x13, 0xa7, 0x49, 0x7b,
		0xf3, 0x01, 0xc2, 0x2c, 0xca, 0xd4, 0x58, 0x18,
		0xf1, 0x3d, 0x95, 0x19, 0x04, 0x4c, 0x7f, 0x34,
		0x0f, 0x68, 0x72, 0xd7, 0x15, 0x78, 0x92, 0xf9,
		0xd8, 0x09, 0x2d, 0xd2, 0x21, 0xf3, 0xad, 0x5b,
		0x2b, 0xb0, 0xa1, 0xfb, 0x4e, 0xda, 0xc2, 0x9d,
		0x6e, 0xe2, 0xad, 0x71, 0xda, 0xd0, 0x75, 0x23,
		0xbb, 0xd5, 0x20, 0x0b, 0xf9, 0xcd, 0x2a, 0xa0,
		0xa1, 0x14, 0x73, 0x8b, 0x8b, 0x86, 0x39, 0x23,
		0x7a, 0x49, 0x81, 0x4e, 0x24, 0x86, 0x0d, 0x9c,
	}
	out512_test8 := []byte{
		0x90, 0x81, 0x83, 0x14, 0xb2, 0x36, 0xb4, 0x87,
		0xe3, 0xef, 0x2a, 0x01, 0x72, 0x87, 0x40, 0xa1,
		0x8a, 0x53, 0x40, 0x26, 0xa9, 0xba, 0x70, 0x3f,
		0x6f, 0x73, 0x53, 0x29, 0x6e, 0x7b, 0x85, 0x4c,
		0x79, 0x04, 0x73, 0x2b, 0xb7, 0xec, 0x7e, 0xbd,
		0xcf, 0xff, 0x94, 0xf4, 0x04, 0x74, 0xb8, 0x91,
		0xc0, 0xd4, 0x64, 0x9e, 0xd7, 0xdc, 0x07, 0x4f,
		0x50, 0xb2, 0x48, 0xab, 0xf5, 0xc3, 0xc2, 0x62,
		0x23, 0x81, 0x08, 0x21, 0x23, 0x59, 0xcc, 0xf7,
		0xe8, 0xe6, 0x76, 0x8f, 0x7c, 0xb7, 0x1b, 0x41,
		0xf7, 0x10, 0xb5, 0xbe, 0x90, 0x2c, 0xc0, 0xbc,
		0xca, 0xac, 0x00, 0xe6, 0xa0, 0x35, 0xb8, 0x60,
		0x21, 0xb3, 0x04, 0xdd, 0x59, 0x24, 0xde, 0xcd,
		0x33, 0xb2, 0x4d, 0xd8, 0x52, 0x4d, 0xde, 0x70,
		0x63, 0xf9, 0x34, 0x1a, 0x7a, 0xf3, 0xd0, 0xe9,
		0xd6, 0xda, 0xab, 0x5b, 0x43, 0xd3, 0xb5, 0x95,
		0xca, 0x41, 0xee, 0x32, 0xb9, 0x4a, 0x24, 0x8a,
		0xba, 0x49, 0x7a, 0xca, 0x5e, 0xf1, 0x31, 0xae,
		0xa5, 0x39, 0xdc, 0xb1, 0x54, 0x79, 0xa3, 0xb9,
		0xe9, 0x68, 0xe6, 0xd5, 0xba, 0x35, 0xd8, 0x45,
		0x20, 0xf1, 0x97, 0x5b, 0x23, 0x8e, 0x34, 0x0d,
		0x9f, 0x80, 0x6b, 0xff, 0x3a, 0x5d, 0xea, 0x40,
		0xaf, 0x7e, 0xbd, 0xe4, 0x0f, 0x39, 0x3b, 0x8d,
		0x29, 0xba, 0xfd, 0xc7, 0x4c, 0x15, 0xf2, 0x4e,
		0x37, 0x8e, 0x1e, 0x37, 0x5d, 0xb9, 0x09, 0xfb,
		0x07, 0x87, 0x06, 0x88, 0x95, 0xf3, 0xac, 0x60,
		0x9a, 0x65, 0xda, 0xd5, 0x65, 0xb7, 0x22, 0x41,
		0x50, 0x1f, 0xa3, 0xd3, 0x00, 0x07, 0x3c, 0x9b,
		0xa2, 0x4d, 0x46, 0x19, 0xf6, 0x15, 0xf5, 0xf6,
		0xa6, 0xee, 0x6d, 0x28, 0xd8, 0xb2, 0x4a, 0x1b,
		0x9f, 0x76, 0x7e, 0x47, 0x98, 0x65, 0x8c, 0x72,
		0xf3, 0x78, 0x62, 0xe2, 0x28, 0x45, 0x45, 0x21,
		0x33, 0xfc, 0x52, 0x5c, 0x16, 0x79, 0x9a, 0x4d,
		0xeb, 0x3d, 0xc9, 0x5e, 0xd5, 0xab, 0x1e, 0x55,
		0x43, 0x13, 0x23, 0x24, 0x40, 0x3f, 0x30, 0xb2,
		0xdd, 0xd6, 0x1c, 0x90, 0xad, 0x47, 0xa7, 0x5b,
		0xa8, 0xb0, 0x9b, 0xda, 0x92, 0x71, 0x35, 0x7e,
		0x29, 0xe0, 0xc8, 0xed, 0x19, 0x06, 0x75, 0x18,
		0x36, 0xd3, 0x03, 0xc2, 0xfd, 0x0f, 0x7f, 0x82,
		0x48, 0x76, 0xbd, 0xbd, 0x70, 0x7f, 0x71, 0xb8,
		0xf1, 0x01, 0x32, 0x91, 0xff, 0xd3, 0xf3, 0x2e,
		0x77, 0xa3, 0xca, 0x78, 0x7c, 0x07, 0xe0, 0x76,
		0x85, 0xda, 0xa0, 0x1e, 0xad, 0x65, 0xc5, 0x00,
		0xd1, 0x5d, 0xcb, 0x55, 0xa1, 0x73, 0x3b, 0x8f,
		0xf2, 0xae, 0x08, 0xc0, 0x12, 0x7d, 0xcf, 0xa2,
		0x68, 0xde, 0x18, 0x5a, 0x46, 0x04, 0xad, 0xb7,
		0x85, 0xd2, 0x7a, 0x24, 0x7f, 0x32, 0xbe, 0xc7,
		0xb3, 0x44, 0xdf, 0x1e, 0xc4, 0x94, 0x45, 0x6a,
		0x7e, 0x60, 0xe7, 0xc9, 0x42, 0x50, 0xe4, 0x15,
		0x50, 0x7d, 0x24, 0xfc, 0x40, 0x2f, 0x1a, 0x94,
		0x13, 0x3d, 0x3c, 0xbf, 0xb3, 0x7d, 0xc7, 0x57,
		0x05, 0xf6, 0x5a, 0x1b, 0xe0, 0x8e, 0x27, 0x9b,
		0x9c, 0x08, 0xbc, 0xe2, 0xbb, 0xcd, 0x81, 0x2b,
		0x59, 0x24, 0x78, 0x14, 0x3e, 0x8d, 0x2e, 0xa7,
		0x47, 0xde, 0x81, 0xe6, 0x88, 0x6e, 0x5e, 0x09,
		0xb5, 0xf7, 0x1c, 0x04, 0x73, 0x3a, 0x95, 0x7e,
		0x0c, 0xdb, 0xd4, 0x27, 0x06, 0x74, 0x48, 0x18,
		0xb8, 0x9b, 0xb5, 0x2d, 0x97, 0xf1, 0xcb, 0x09,
		0x0f, 0x4a, 0x06, 0x4f, 0x1c, 0x68, 0xa3, 0x84,
		0x7d, 0xe0, 0xf7, 0x1d, 0x4d, 0x80, 0x72, 0xf2,
		0x6b, 0x54, 0x7b, 0x00, 0x5d, 0x54, 0xaa, 0x48,
		0x65, 0x6f, 0x7e, 0xd6, 0xc7, 0x86, 0x88, 0x0a,
		0x89, 0x7c, 0xb9, 0xaa, 0xcc, 0x46, 0x46, 0x35,
		0xa6, 0x37, 0xaf, 0x7e, 0xba, 0x7d, 0xf5, 0xdb,
	}
	/*in64 := [64]byte{
	0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86,
	0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
	0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5,
	0x0d, 0xf8, 0x46, 0x11, 0x6d, 0xcd, 0x3b, 0x1d,
	0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85,
	0x14, 0x12, 0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32,
	0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29,
	0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e}
	in16 := [16]byte{
		0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86,
		0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
	}

	out_test20 := []byte{
		0xf7, 0x07, 0xfa, 0xa2, 0x93, 0x39, 0x58, 0x07,
		0x25, 0x32, 0x38, 0x45, 0xfd, 0x68, 0xe7, 0xbd,
		0x54, 0xe0, 0x12, 0x1c, 0x96, 0x34, 0xca, 0x7b,
		0xf7, 0x35, 0xd7, 0x77, 0x9b, 0x1c, 0xd6, 0x7b,
		0x25, 0x7c, 0x43, 0x66, 0xb5, 0x36, 0x59, 0xb5,
		0xa5, 0x26, 0x3b, 0xf1, 0x66, 0xfe, 0x17, 0x53,
		0x0b, 0xcf, 0x7b, 0x5e, 0xe2, 0x5f, 0x9d, 0xc2,
		0x96, 0x17, 0x46, 0xc6, 0xff, 0xe6, 0x98, 0x3a,
	}
	*/

	key := [32]byte{
		0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99,
		0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c, 0xef, 0x05,
		0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d,
		0xfd, 0x7b, 0x1c, 0x63, 0x96, 0x68, 0x2f, 0x29,
	}
	counter := [16]byte{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5}

	// core applies the Salsa20 core function to 16-byte input in, 32-byte key k,
	// and 16-byte constant c, and puts the result into 64-byte array out.
	//func core(out *[64]byte, in *[16]byte, k *[32]byte, c *[16]byte) {
	//var out_core [64]byte
	//core(&out_core, &in16, &key, &counter)
	//t.Errorf("% 02x,", out_core)

	test_amd64 := true

	// The default calls used externally:
	// XORKeyStream uses the default 20 rounds
	out_XOR := make([]byte, 512)
	XORKeyStream(out_XOR, in512, &counter, &key)
	if !testEq(out_XOR, out512_test20) {
		t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test20, out_XOR)
	}

	// XORKeyStreamWithRounds specifying 20 rounds
	out_XOR = make([]byte, 512)
	XORKeyStreamWithRounds(out_XOR, in512, &counter, &key, 20)
	if !testEq(out_XOR, out512_test20) {
		t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test20, out_XOR)
	}

	// XORKeyStreamWithRounds specifying 12 rounds
	out_XOR = make([]byte, 512)
	XORKeyStreamWithRounds(out_XOR, in512, &counter, &key, 12)
	if !testEq(out_XOR, out512_test12) {
		t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test12, out_XOR)
	}

	// XORKeyStreamWithRounds specifying 8 rounds
	out_XOR = make([]byte, 512)
	XORKeyStreamWithRounds(out_XOR, in512, &counter, &key, 8)
	if !testEq(out_XOR, out512_test8) {
		t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test8, out_XOR)
	}

	// noasm genericXORKeyStream(out, in, counter, key) using default 20 rounds
	out_XOR = make([]byte, 512)
	genericXORKeyStream(out_XOR, in512, &counter, &key)
	if !testEq(out_XOR, out512_test20) {
		t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test20, out_XOR)
	}

	fmt.Sprintf("")
	//for j := 0; j < len(out_XOR); j += 8 {
	//  fmt.Printf("0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x,\n", out_XOR[j], out_XOR[j+1], out_XOR[j+2], out_XOR[j+3], out_XOR[j+4], out_XOR[j+5], out_XOR[j+6], out_XOR[j+7])
	//}

	// noasm genericXORKeyStream(out, in, counter, key, rounds) with 20 rounds
	out_XOR = make([]byte, 512)
	generic20nXORKeyStream(out_XOR, in512, &counter, &key, 20)
	if !testEq(out_XOR, out512_test20) {
		t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test20, out_XOR)
	}

	if test_amd64 {
		// asm salsa20nXORKeyStream(out, in *byte, n uint64, nonce, key *byte, rounds uint64) with 20 rounds
		out_XOR = make([]byte, 512)
		salsa20nXORKeyStream(&out_XOR[0], &in512[0], uint64(len(in512)), &counter[0], &key[0], uint64(20))
		if !testEq(out_XOR, out512_test20) {
			t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test20, out_XOR)
		}
	}

	// noasm genericXORKeyStream(out, in, counter, key, rounds) with 12 rounds
	out_XOR = make([]byte, 512)
	generic20nXORKeyStream(out_XOR, in512, &counter, &key, 12)
	if !testEq(out_XOR, out512_test12) {
		t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test12, out_XOR)
	}

	if test_amd64 {
		// asm salsa20nXORKeyStream(out, in *byte, n uint64, nonce, key *byte, rounds uint64) with 12 rounds
		out_XOR = make([]byte, 512)
		salsa20nXORKeyStream(&out_XOR[0], &in512[0], uint64(len(in512)), &counter[0], &key[0], uint64(12))
		if !testEq(out_XOR, out512_test12) {
			t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test12, out_XOR)
		}
	}

	// noasm genericXORKeyStream(out, in, counter, key, rounds) with 8 rounds
	out_XOR = make([]byte, 512)
	generic20nXORKeyStream(out_XOR, in512, &counter, &key, 8)
	if !testEq(out_XOR, out512_test8) {
		t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test8, out_XOR)
	}

	if test_amd64 {
		// asm salsa20nXORKeyStream(out, in *byte, n uint64, nonce, key *byte, rounds uint64) with 8 rounds
		out_XOR = make([]byte, 512)
		salsa20nXORKeyStream(&out_XOR[0], &in512[0], uint64(len(in512)), &counter[0], &key[0], uint64(8))
		if !testEq(out_XOR, out512_test8) {
			t.Errorf("\nexpected: % 02x,\n     got: % 02x", out512_test8, out_XOR)
		}
	}
}

func TestOutOfBoundsWrite(t *testing.T) {
	// encrypted "0123456789"
	cipherText := []byte{170, 166, 196, 104, 175, 121, 68, 44, 174, 51}
	var counter [16]byte
	var key [32]byte
	want := "abcdefghij"
	plainText := []byte(want)
	defer func() {
		err := recover()
		if err == nil {
			t.Error("XORKeyStream expected to panic on len(dst) < len(src), but didn't")
		}
		if plainText[3] == '3' {
			t.Errorf("XORKeyStream did out of bounds write, want %v, got %v", want, string(plainText))
		}
	}()
	XORKeyStream(plainText[:3], cipherText, &counter, &key)
}

func testEq(a []byte, b []byte) (ret bool) {
	// If one is nil, the other must also be nil.
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	ret = true
	for i := range a {
		if a[i] != b[i] {
			//fmt.Println("Mismatch at", i)
			ret = false
		}
	}
	return
}
